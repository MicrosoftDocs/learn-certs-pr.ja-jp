### YamlMime:Course
title: Developing ASP.NET MVC 5 Web Applications
metadata:
  title: 'Course 20486-C: Developing ASP.NET MVC 5 Web Applications'
  description: 'Course 20486-C: Developing ASP.NET MVC 5 Web Applications'
uid: course.20486-c
courseNumber: '20486-C'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Microsoft Web Technologies スタックについて説明し、特定のアプリケーションの開発に使用する適切なテクノロジーを選択する。
- skill: 一連の機能要件とユーザインターフェイス要件に対応し、ビジネスモデルに対処するウェブアプリケーションのアーキテクチャと実装を設計する。
- skill: ミドルウェアを使用して ASP.NET Core ウェブアプリケーションのパイプラインを構成し、 MVC アプリケーション全体で依存性注入を活用する。
- skill: MVC アプリケーションにコントローラを追加して、ユーザーのインタラクションを管理し、モデルを更新し、ビューを選択して戻す。
- skill: ASP.NET Core ルーティングエンジンを使用して、わかりやすい URL と論理的ナビゲーション階層をユーザに提示するウェブアプリケーションを開発する。
- skill: データを表示および編集し、モデルおよびコントローラと対話する MVC アプリケーションでビューを作成する。
- skill: MVC モデルを作成し、 モデルのメソッド、プロパティ、イベント内にビジネスロジックを実装するコードを記述する。
- skill: Entity Framework Core を使用して、 ASP.NET Core アプリケーションをデータベースに接続する。
- skill: MVC ウェブアプリケーション全体に一貫したルック & フィールを実装する。
- skill: クライアント側で動作する JavaScript コードを書き、jQuery スクリプト ライブラリを利用して MVC ウェブ アプリケーションの応答性を最適化する。
- skill: クライアント側のパッケージを追加し、タスクランナーを設定する。
- skill: Visual Studio 2017 でウェブアプリケーションに対して単体テストとデバッグツールを実行する。
- skill: アイデンティティを使用して、コンテンツに安全にアクセスするためにユーザーを認証および認可する MVC アプリケーションを作成する。
- skill: 悪意のある攻撃に対抗する MVC アプリケーションを構築する。
- skill: キャッシュを使用して、ユーザーのリクエストへの応答を高速化する。
- skill: SignalR を使用して、クライアントとサーバー間の双方向通信を有効にする。
- skill: Web API とは何か、なぜ開発者がアプリケーションに Web API を追加するのかについて説明する。
- skill: ASP.NET Core MVC ウェブアプリケーションを開発用コンピュータからウェブサーバにパッケージ化してデプロイする方法を説明する。
learningPartnersLink: https://www.microsoft.com/learning/partners.aspx
locales:
- en
levels:
- advanced
roles:
- developer
products:
- aspnet-core
exams:
- uid: exam.70-486
summary: |-
  この 5 日間のコースでは、プロの Web 開発者は .NET Core ツールとテクノロジーを使用して、高度な ASP.NET Core MVC アプリケーションを開発することを学びます。Web サイトアプリケーションのパフォーマンスとスケーラビリティを高めるコーディング活動が中心となります。本コースは Exam 70-486 の準備に役立ちます。

  #### 視聴者プロフィール
  本コースは、個人ベースまたはチームベースの小規模から大規模の開発環境で Microsoft Visual Studio を使用するプロのウェブ開発者を対象としています。本コースの受験者は、高度なウェブアプリケーションの開発に関心があり、レンダリングされた HTML を総合的に管理したいと考えています。ユーザーインターフェース、データアクセス、アプリケーションロジックを分離したウェブサイトを作成したいと考えています。
prerequisitesSection: |-
  このコースに参加する前に、受講者は次のことが必要です&#58;
  - Visual Studio 2017 の使用経験がある。
  - C# でのプログラミング経験があり、さらに Lambda式、LINQ、匿名型などの概念がある方。
  - .NET Framework の使用経験がある。
  - HTML、CSS、JavaScript の使用経験がある。
  - ADO.NET を使用したクエリやデータ操作の経験がある。
  - XML および JSON データ構造に関する知識がある。
outlineSection: |-
  ### モジュール 1&#58; ASP.NET Core MVC の探索
  Microsoft ASP.NET Core MVC と ASP.NET Core の他のウェブテクノロジーは、ダイナミックでパワフルかつ拡張性のあるウェブアプリケーションの作成とホストに役立ちます。ASP.NET Core は、 ASP.NET Core MVC の一部であるオープンソースのクロスプラットフォームフレームワークであり、ウェブアプリケーションを構築できます。受講者は、Windows、macOS、Linux、またはそれをサポートする他のプラットフォーム上で ASP.NET Core ウェブアプリケーションを開発し、実行することができます。

  ASP.NET Core MVC は、アジャイルでテスト駆動型の開発サイクルをサポートします。また、最新の HTML 標準や Angular、React などのフロントエンドフレームワークを利用することができます。
  #### レッスン
  - Microsoft ウェブテクノロジーの概要
  - ASP.NET 4.x の概要
  - ASP.NET Core MVC の概要


  #### ラボ&#58; ASP.NET Core MVC の探索
  - Razor Pages アプリケーションの探索
  - Web API アプリケーションの探索
  - MVC アプリケーションの探索

  本コースを終了すると、受講者は以下のことができるようになります。
  - Microsoft ウェブスタックで利用可能なさまざまなテクノロジーを理解する。
  - ASP.NET で開発者が利用できるさまざまなプログラミングモデルについて説明する。
  - ASP.NET Core と ASP.NET 4.x のどちらかを選択する。
  - ウェブテクノロジースタックにおける ASP.NET Core MVC の役割と、ASP.NET Core MVCを使用してウェブアプリケーションを構築する方法を説明する。
  - MVC モデル、 MVC コントローラ、および MVC ビューを区別する。


  ### モジュール 2&#58; ASP.NET Core MVC ウェブアプリケーションの探索
  Microsoft ASP.NET Core MVC は、パワフルで複雑なウェブアプリケーションの作成に使用できるプログラミングモデルです。しかし、すべての複雑な開発プロジェクト、特に大規模なプロジェクトは、完全に理解するには困難で複雑なものになる可能性があります。プロジェクトの目的を完全に理解していなければ、顧客の問題に対して効果的な解決策を開発することはできません。一連のビジネスニーズを特定し、それらのニーズを満たすためのモデル-ビュー-コントローラ (MVC) ウェブアプリケーションを計画する方法を知る必要があります。受講者が作成するプロジェクト計画は、ステークホルダーの要件を理解していることを保証し、Web アプリケーションの機能性、ユーザーインターフェース、構造、データ保存を開発者に伝えます。詳細で正確なプロジェクト計画を作成することにより、 MVC の強力な機能を効果的に使用して顧客のビジネス上の問題を解決できます。
  #### レッスン
  - プロジェクト設計フェーズでの計画
  - モデル、コントローラ、およびビューの設計


  #### ラボ&#58; ASP.NET Core MVC ウェブアプリケーションの設計
  - モデルクラスの計画
  - コントローラの計画
  - ビューの計画
  - アーキテクトと MVC ウェブアプリケーション

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - ASP.NET Core MVC ウェブアプリケーションの全体的なアーキテクチャを計画し、状態管理などの側面を考慮する。
  - 与えられた一連の機能要件を実装するために必要なモデル、コントローラ、およびビューを計画する。


  ### モジュール 3&#58; ASP.NET Core におけるミドルウェアとサービスの構成
  ASP.NET Core は、さまざまな種類のアプリケーションを構築できるフレームワークです。本モジュールでは、 ASP.NET Core フレームワークを活用して、既存のカスタムミドルウェアやカスタムミドルウェアを介したリクエストやレスポンスを処理する方法、およびミドルウェアやコントローラなどのアプリケーションの他の部分で使用するサービスを構成する方法について学びます。
  ミドルウェアとは、リクエストとレスポンスのパイプラインの一部として使用できるコードのセグメントで、関連する任意のパラメータに応じてそれらを処理することができます。これにより、複数の別々のリクエストをまったく異なる方法で処理し、別々のレスポンスを受け取ることができます。
  サービスとは、アプリケーションのさまざまな部分で使用できる機能を公開するクラスです。個々の場所でスコープを手動で追跡し、依存関係をインスタンス化する必要はありません。これは、依存性インジェクションを使用して行います。
  依存性インジェクションは、 ASP.NET Core で使用される手法で、オブジェクトのインスタンス化、メモリ内での保持、必要な依存性の受け渡しを気にすることなく、コードに依存性を追加できます。これにより、アプリケーションの柔軟性が向上し、サービスを変更するたびに潜在的な障害のポイントを減らすことができます。
  #### レッスン
  - ミドルウェアの設定
  - サービスの設定


  #### ラボ&#58; ASP.NET Core におけるミドルウェアとサービスの設定
  - 静的ファイルの操作
  - カスタマーミドルの作成
  - 依存性インジェクションの使用
  - コントローラへのサービスの注入

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - 既存のミドルウェアを使用して、 ASP.NET Core アプリケーションをセットアップする。
  - 独自のミドルウェアを作成し、それを使用してカスタム動作を定義する。
  - 依存性インジェクションの基本的な原理と、ASP.NET Coreでの使用方法を理解する。
  - カスタムサービスを作成し、そのスコープを設定し、ミドルウェアと ASP.NET Core MVC コントローラの両方に注入する方法を学ぶ。


  ### モジュール 4&#58; コントローラの開発
  ASP.NET Core MVCは、モデル-ビュー-コントローラ(MVC)アーキテクチャパターンを利用してウェブアプリケーションを構築するためのフレームワークです。コントローラは基本的に、モデルと対話して結果をビューに渡すことによって、 ウェブのリクエストを処理します。このモデルは、ドメインと呼ばれることもあるビジネスレイヤーを表し、データオブジェクト、アプリケーションロジック、ビジネスルールなどを含みます。ビューは、コントローラから受信したデータを使用して、ブラウザに返される HTML またはその他の出力を生成します。
  本モジュールでは、コントローラの開発方法について学びます。コントローラは MVC アプリケーションの中心的な役割を果たします。コントローラがどのように動作するかを理解することは、適切なモデルオブジェクトを作成し、それらを操作して、適切なビューに渡すことができるために不可欠です。
  コントローラはクラスです。それにはいくつかのメソッドが含まれています。これらのメソッドはアクションと呼ばれます。MVC アプリケーションがリクエストを受け取ると、どのコントローラとアクションがリクエストを処理すべきかを見つけます。これは、 Uniform Resource Locator (URL)ルーティングを使用して決定されます。
  URL ルーティングは、 MVC アプリケーションの開発に必要なもう 1 つの非常に重要な概念です。ASP.NET Core MVC フレームワークには、アプリケーション内で URL マッピングルールを定義できる柔軟な URL ルーティングシステムが含まれています。
  コントローラでコードを最大限に再利用するには、アクションフィルタの書き方を知っておくことが重要です。アクションフィルタを使用して、ウェブアプリケーションのすべてのアクションの前後に、コントローラのすべてのアクション、またはコントローラアクションの他の組み合わせに対してコードを実行できます。
  #### レッスン
  - コントローラとアクションの記述
  - ルートの設定
  - アクションフィルタの記述


  #### ラボ&#58; コントローラの開発
  - MVC アプリケーションへのコントローラとアクションの追加
  - ルーティングテーブルを使用したルートの設定
  - 属性を使用したルートの設定
  - アクションフィルタの追加

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - プロジェクトデザインで指定されたユーザーアクションに応答するウェブアプリケーションにコントローラを追加する。
  - ASP.NET Core ルーティングエンジンにルートを追加し、 MVC ウェブアプリケーションにおいてURL は使いやすいものであるということを確認する。
  - コントローラアクションの前後に実行されるアクション内のコードフィルタを記述する。


  ### モジュール 5&#58; ビューの開発
  ビューは、 モデル-ビュー-コントローラ(MVC)プログラミングモデルの 3 つの主要コンポーネントの 1 つです。ビューを作成することで、ウェブアプリケーションのユーザインターフェイスを定義できます。ビューは、 Web サーバー上で実行される HTML マークアップと C# コードの組み合わせです。したがって、ビューを作成するためには、 HTML マークアップと C# コードの記述方法、および MVC に組み込まれているさまざまなヘルパークラスの使用方法を理解している必要があります。また、部分的なビューとビューコンポーネントを作成する方法についても知っておく必要があります。これらのコンポーネントは、ウェブアプリケーションで再利用できる HTML のセクションをレンダリングします。
  #### レッスン
  - Razor 構文を使用したビューの作成
  - HTML ヘルパーとタグヘルパーの使用
  - ビューにおけるコードの再利用


  #### ラボ&#58; ビューの開発
  - MVC アプリケーションへのビューの追加
  - 部分的なビューの追加
  - ビューコンポーネントの追加

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - MVC ビューを作成し、ユーザーにデータを表示するために Razor マークアップを追加する。
  - ビューで HTML ヘルパーとタグヘルパーを使用します。アプリケーション全体の複数の場所で Razor マークアップを再利用します。


  ### モジュール 6&#58; モデルの開発
  ほとんどのウェブアプリケーションは、さまざまな種類のデータまたはオブジェクトと相互作用します。たとえば、 e コマースアプリケーションは、製品、ショッピングカート、顧客、注文を管理します。ソーシャルネットワーキングアプリケーションは、ユーザー、ステータスの更新、コメント、写真、ビデオなどの管理に役立つ場合もありますす。ブログは、ブログエントリ、コメント、カテゴリ、およびタグの管理に使用されます。モデル-ビュー-コントローラ (MVC)ウェブアプリケーションを記述する場合は、ウェブアプリケーションのデータをモデル化するために MVC モデルを作成します。このモデル内では、オブジェクトのタイプごとにモデルクラスを作成します。モデルクラスは、各タイプのオブジェクトのプロパティを記述し、ビジネスプロセスに一致するビジネスロジックを含めることができます。したがって、モデルは MVC アプリケーションの基本的な構成要素です。本モジュールでは、モデル用のコードを作成する方法を学びます。
  #### レッスン
  - MVC モデルの作成
  - フォームの操作
  - MVC アプリケーションを検証する


  #### ラボ&#58; モデルの開発
  - モデルの追加
  - フォームの操作
  - 検証を追加する

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - MVC アプリケーションにモデルを追加し、ビジネスロジックを実装するコードを記述する。
  - データ注釈の表示と編集を使用する。
  - データ注釈を使用してユーザー入力を検証する。


  ### モジュール 7&#58; ASP.NET Core における Entity Framework Core の使用
  Web アプリケーションは情報を利用することが多く、通常はその情報のためのデータストアを必要とします。データストアからデータを使用する Web ページをレンダリングすることで、ユーザーの入力、管理者のアクション、および公開イベントに応じて継続的に変化するウェブアプリケーションを作成できます。通常、データストアはデータベースですが、他の種類のデータストアが使用されることもあります。モデル-ビュー-コントローラ(MVC)アプリケーションでは、データアクセスロジックとビジネスロジックを実装するモデルを作成できます。あるいは、リポジトリを使用して、ビジネスロジックとデータアクセスロジックを分離することもできます。リポジトリは、コントローラがデータストアからデータを読み取ったり、データストアにデータを書き込んだりするために呼び出すことができるクラスです。ASP.NET アプリケーションを記述するときは、 Entity Framework Core (EF Core) および Language Integrated Query (LINQ) テクノロジーを使用できます。これにより、データアクセスコードの記述が非常に迅速になり、理解が容易になります。本モジュールでは、 MVC でデータベース駆動型の Web サイトを構築する方法について学びます。
  #### レッスン
  - Entity Framework Core の概要
  - Entity Framework Core の操作
  - Entity Framework Core を使用して Microsoft SQL Server に接続する


  #### ラボ&#58; ASP.NET Core における Entity Framework Core の使用
  - Entity Framework Core の追加
  - Entity Framework Core の使用によるデータの取得・保存
  - Entity Framework Core を使用して Microsoft SQL Server に接続する

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - アプリケーションをデータベースに接続し、データにアクセスして保存する。
  - EF Core について説明する。
  - Entity Framework Core を操作する。
  - EF Core を使用して、 Microsoft SQL Server を含むデータベースに接続する。


  ### モジュール 8&#58; ASP.NET Core MVC でのレイアウト、 CSS、JavaScript の使用
  Web アプリケーションを構築している間は、アプリケーションに一貫した外観を適用する必要があります。すべてのビューに一貫したヘッダとフッタのセクションを含める必要があります。Microsoft ASP.NET Core MVC には、カスケーディングスタイルシート (CSS) スタイルやレイアウトなどの機能が含まれており、ウェブアプリケーションの外観と使いやすさを向上させます。
  ASP.NET Core MVC では、 JavaScript を使用してインタラクティブな HTML 要素を作成できます。Web アプリケーションで JavaScript を使用する方法を知っておく必要があります。Web アプリケーションへの JavaScript の追加を簡略化するためには、 jQuery などのライブラリの使用方法を知っておく必要があります。
  #### レッスン
  - レイアウトの使用
  - CSS および JavaScript の使用
  - jQuery の使用


  #### ラボ&#58; ASP.NET Core でのレイアウト、 CSS、JavaScript の使用
  - レイアウトとリンクビューの適用
  - CSS の使用
  - JavaScript の使用
  - jQuery の使用

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - ASP.NET Core MVC アプリケーションに一貫したレイアウトを適用する。
  - ウェブアプリケーションに JavaScript コードを追加する。
  - ウェブアプリケーションで jQuery ライブラリを使用する。


  ### モジュール 9&#58; クライアント側での開発
  アプリケーションを作成するときは、アプリケーションのクライアント側とサーバー側の両方で開発する方法を知っておくことが重要です。本モジュールでは、さまざまな規模のウェブアプリケーションを作成できるクライアント側のツールについて学びます。これらのツールは、モジュール 8 「ASP.NET Core MVC でのレイアウト、 CSS 、 JavaScript の使用」でカバーされているトピックに基づいています。
  本モジュールでは、 Bootstrap フレームワークを使用してウェブアプリケーションのスタイルを設定する方法について学びます。次に、変数、ネストされたルール、関数などの CSS に機能を追加する 2 つの一般的な カスケードスタイルシート(CSS)プリプロセッサである Sass と Less の使用法について学びます。これらにより、複雑なウェブアプリケーションの保守性が大幅に向上します。
  次に、Grunt や gulp などのタスクランナーの設定方法と、それらを使って Microsoft Visual Studio のビルド中に Sass ファイルをコンパイルする方法を学びます。gulp タスクランナーを使用して CSS ファイルと JavaScript ファイルのバンドルと最小化を実行する方法と、ソリューションを再構築することなく、コードを記述するときに Sass ファイルをコンパイルするためのウォッチャータスクを設定する方法について学びます。
  最後に、 ウェブブラウザやデバイスの機能と仕様に基づいてウェブアプリケーションの表示をカスタマイズできる応答性の高いデザインツールについて学びます。CSS メディアクエリの作成方法、ブートストラップ応答グリッドシステムの使用方法、および CSS Flexbox レイアウトをビューに適用する方法について学びます。
  #### レッスン
  - スタイルの適用
  - タスクランナーの使用
  - 応答性に優れたデザイン


  #### ラボ&#58; クライアント側での開発
  - gulp を使用してタスクを実行する
  - Sass を使用したスタイル設定
  - ブートストラップの使用

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - Microsoft ASP.NET Core アプリケーションで Bootstrap、 Sass、 Less を使用する。
  - ASP.NET Core アプリケーションでタスクランナーを使用する。
  - 画面サイズが異なるデバイスでウェブアプリケーションが正しく表示されることを確認する。


  ### モジュール 10&#58; テストとトラブルシューティング
  Web アプリケーションなどのソフトウェアシステムは複雑であり、複数のコンポーネントを必要とします。これらのコンポーネントは多くの場合、異なる開発者によって書かれていることが多く、連携して動作します。誤った仮定、不正確な理解、コーディングエラー、その他多くの原因により、例外または予期しない動作を引き起こすバグが発生する可能性があります。ウェブアプリケーションの品質を向上させ、満足のいくユーザー体験を作るためには、あらゆるソースからバグを特定して排除する必要があります。
  従来は、テスト担当者は開発プロジェクトの最後にほとんどのテストを実行していました。しかし、最近では、プロジェクトのライフサイクル全体を通じてテストを実施することにより品質が向上し、生産用ソフトウェアにバグがないことが広く認められています。完全なウェブアプリケーションに組み込む前に、ウェブアプリケーションの小さなコンポーネントでテストを実行して、テストが期待どおりに機能することを確認する方法を理解する必要があります。
  また、例外が発生している間に例外を処理する方法を知っておくことも重要です。アプリケーションの実行中に、予期しない事態が発生することがあります。アプリケーション構造に関する情報の漏洩を回避しながら、例外を正しく管理し、優れたユーザフィードバックを提供することが重要です。
  最後に、アプリケーション全体のログを利用することで、想定外の問題が発生する可能性のあるユーザーの行動を監視し、本番環境で発生したフローを辿って追加のエラーを発見することで、通常では再現方法がわからないバグの解決策を見つけることができます。
  #### レッスン
  - MVC アプリケーションのテスト
  - 例外処理戦略の実装
  - MVC アプリケーションのロギング


  #### ラボ&#58; テストとトラブルシューティング
  - モデルのテスト
  - 疑似リポジトリの使用によるコントローラのテスト
  - MVC プロジェクトへのリポジトリの実装
  - 例外処理を追加する
  - ロギングを追加する

  本コースを終了すると、受講者は以下のことができるようになります。
  - モデルクラスやコントローラなどのモデル-ビュー-コントローラ(MVC)コンポーネントに対してユニットテストを実行し、潜在的なバグを見つける。
  - 例外をスムーズかつ確実に処理する Microsoft ASP.NET Core MVC アプリケーションを構築する。
  - アプリケーションに役立つロギングプロバイダを実行し、共通のロギング API を使用して実行する。


  ### モジュール 11&#58; セキュリティの管理
  ウェブアプリケーションは通常、アプリケーションを使用するためにブラウザのみを使用するユーザを対象としているため、インストールされているアプリケーションよりもはるかに多くのユーザが存在する可能性があります。ただし、 ウェブアプリケーションのオープンな性質により、セキュリティは、構築時に常に最優先事項になる必要があります。セキュリティの一環として、どのユーザーがどのようなアクションを実行できるかを決定する必要がありますが、その一方で、アプリケーションにアクセスできる可能性のある悪意のある第三者からユーザーとアプリケーションを保護する必要があります。
  認証とは、いくつかのパラメータを利用して、ユーザーが自分の主張する人物であることを確認する行為です。認証を実装することにより、アプリケーションを利用しながらユーザーが誰であるかを把握し、適切なコンテンツを提供することができます。
  認可とは、アプリケーションですでに認証されているユーザーに、特定のアクションまたはリソースへのアクセスを許可するプロセスです。認可を利用することにより、ユーザーが意図しない秘密情報にアクセスしたり、ユーザーが実行できないアクションを実行したりすることを防止できます。
  最後に、その寿命のある時点で、使用しているアプリケーションが悪意のあるユーザーの攻撃を受ける可能性があります。手段や意図はさまざまですが、無防備であることの代償は大きいです。影響を受ける潜在的なユーザーが失われたり、貴重なデータが誤って変更されたり、最悪の場合はアプリケーション全体が使用できなくなる可能性があります。本モジュールでは、最も一般的な攻撃のいくつかに対するソリューションについて説明します。
  #### レッスン
  - ASP.NET Core での認証
  - ASP.NET Core での認可
  - 攻撃からの防御


  #### ラボ&#58; セキュリティの管理
  - ID を使用する
  - 認可を追加する
  - クロスサイトリクエストフォージェリ攻撃を回避する

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - アプリケーションに基本的な認証を追加する。
  - Microsoft ASP.NET Core Identity を設定する。
  - アプリケーションに基本的な認可を追加する。
  - いくつかの異なる認可アプローチを利用する。
  - セキュリティエクスプロイトがどのように機能するか、またそれらに対する防御を強化する方法を知る。


  ### モジュール 12&#58;パフォーマンスと通信
  最新のウェブアプリケーションでは、ユーザーとの複雑なインタラクションが必要です。ユーザーは、多くの場合、短い時間枠で大量のデータを要求する一方で、オンラインになるとすぐに関連データを期待します。これにより、準備されていないサーバーに大量の負荷がかかり、不必要に複雑な操作や繰り返しの操作が発生し、サーバーに負荷がかかります。幸いにも、負荷を軽減する方法は複数あります。
  キャッシュを使用すると、よく繰り返されるリクエストを保存して、同じロジックを繰り返し実行する必要性を防ぐことができます。キャッシュを使用することにより、すでにロードされているデータを再利用してユーザーに提示できます。これにより、ユーザーは応答時間を短縮し、アクションのロジックの実行に使用されるシステムリソースを軽減できます。
  一方、ステートでは、異なるリクエスト間の一貫したステートを実現できます。さまざまな形態のステート管理を利用することで、通常はステートレスなウェブ体験を、異なるユーザーが同じアプリケーションで個別の関連性のある体験を楽しめるように、個々のクライアントに合わせてカスタマイズされたものに変えることができます。
  最後に、SignalR は、複数の異なる通信プロトコルを使いやすい API に抽象化したフレームワークであり、サーバーとクライアント上の単一のツールセットを簡単に作成して双方向通信を促進することができます。これにより、特定のブラウザに対応する必要がなく、実装したいロジックに集中することができます。
  #### レッスン
  - キャッシュ戦略の実装
  - ステートの管理
  - 双方向通信


  #### ラボ&#58;パフォーマンスと通信
  - キャッシュ戦略の実装
  - ステートの管理
  - 双方向通信

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - Microsoft ASP.NET Core アプリケーションでキャッシュを実装する。
  - ユーザーに一貫した体験を提供することで、ステート管理テクノロジーを使用してクライアント体験を向上させる。
  - SignalR を使用して双方向通信を実装し、重要なイベントが発生したときにサーバーがクライアントに通知できるようにする。


  ### モジュール 13&#58; Web API の実装
  ほとんどのウェブアプリケーションでは、モバイルアプリケーションなどの外部システムとの統合が必要です。外部システムとのアプリケーション連携を促進するための Web API の使い方を知っておく必要があります。Web API を使用して、Representational State Transfer (REST) サービスをアプリケーションに実装できます。REST サービスは、アプリケーションのオーバーヘッドを削減し、クライアントシステムとサーバーシステム間で転送されるデータを制限するのに役立ちます。アプリケーションに REST スタイルの Web API を効果的に実装するためには、サーバーサイドコードと jQuery コードを使用して Web API を呼び出す方法を知っておく必要があります。
  #### レッスン
  - Web API の概要
  - Web API の設計
  - Web API の呼び出し


  #### ラボ&#58; Web API の実装
  - Microsoft Edge の使用によるアクションの追加と呼び出し
  - サーバーサイドコードの使用による Web API の呼び出し
  - jQuery の使用による Web API の呼び出し

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - ASP.NET Core Web API を使用してサービスを作成する。
  - サーバーサイドコードと jQuery から Web API を呼び出す。


  ### モジュール 14&#58; ホスティングと展開
  ASP.NET Core MVC アプリケーションは、サーバーをインストールするだけで複数のユーザーに同時にサービスを提供できるように設計されており、クライアントはそれにアクセスするためにブラウザを使用します。その結果、ユーザーが専用のソフトウェアをインストールすることに頼らず、さまざまなマシン上でクライアントがアクセスできるようにすることができる、非常に望ましいアプリケーションが実現します。
  ASP.NET Core アプリケーションを本番環境用にセットアップするには、コードをコンパイルして圧縮し、専用のサーバーでセットアップして実行する必要があります。
  ホスティングでは、専用のサーバーを使用してコンパイル済みアプリケーションを格納し、 Web ベースのサービスとしてユーザーに提供します。アプリケーションをホストするために使用できるさまざまなテクノロジーがあり、要件に適したテクノロジーを選択する必要があります。
  展開とは、プロジェクトコードをコンパイルし、ホスティング環境の要件内で機能する方法でホスティングサーバーに転送するプロセスです。
  Microsoft Azure は、Microsoft が提供するクラウドサービスです。それは ASP.NET Core アプリケーションをホストするために使用することができ、クラウドテクノロジー市場で人気のあるツールです。本サービスは、要件に応じて複数の課金オプションで便利な Web アプリケーション関連サービスを提供します。
  #### レッスン
  - オンプレミスのホスティングと展開
  - Microsoft Azure への展開
  - Microsoft Azure 基礎


  #### ラボ&#58; ホスティングと展開
  - Microsoft Azure への ウェブアプリケーションの展開
  - Azure Blob ストレージに画像をアップロードする

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - IIS 上で ASP.NET Core MVC アプリケーションをホストして展開する。
  - Microsoft Azure で ASP.NET Core MVC アプリケーションをホストして展開する。
  - Microsoft Azure が提供するサービスを利用して、 ウェブアプリケーションの機能を向上させることができます。

