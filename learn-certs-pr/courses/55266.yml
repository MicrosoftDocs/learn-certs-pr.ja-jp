### YamlMime:Course
title: Building web apps with Angular and TypeScript
metadata:
  title: 'Course 55266-A: Building web apps with Angular and TypeScript'
  description: 'Course 55266-A: Building web apps with Angular and TypeScript'
uid: course.55266
courseNumber: '55266-A'
hoursToComplete: 72
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: TypeScriptを使用してアプリケーションをセットアップおよび作成。
- skill: Angularアプリケーションを作成および管理。
- skill: データバインディングを使用して画面の更新。
- skill: 複雑なインターフェースをコンポーネントに分割。
- skill: 独自のディレクティブとパイプの作成。
- skill: 検証を使用して複雑なフォームの作成。
- skill: RESTバックエンドとの通信。
- skill: クライアント側のルーティングを使用してシングルページアプリケーションを作成。
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- intermediate
roles:
- developer
summary: |-
  近年、HTMLとJavaScriptを単なるWebコンテンツではなく、ウェブアプリにとってより良い場所にするために多くの努力が払われてきました。Angularを使用すると、これらの新しい最新の概念を活用して、次のレベルに引き上げることができます。コンポーネント化されたアプローチを使用することにより、Angularは、パフォーマンスの高いデータ駆動型ウェブアプリを構築するための設備がこれまでになく向上しています。Angularはデータバインディング、ナビゲーション、サーバー通信を処理します。TypeScriptを使用すると、JavaScriptが提供する最も高度な機能を任意のブラウザで使用できます。強い型付けなどの機能により、アプリケーションはより保守しやすく、構造化され、柔軟性が高まります。このコースは、Angularの最新バージョン（現在はAngular 6）に常に更新されています。GoogleのAngularとMicrosoftのTypeScriptのこの美しい相乗効果をお楽しみください。

  #### オーディエンスプロフィール
  このコースは、AngularとTypeScriptの世界へのキックスタートを探しているプロのWeb開発者を対象としています。このコースの参加者は、JavaScript、HTML、CSS、およびnode.jsとnpmの概念を十分に理解している必要があります。
prerequisitesSection: |-
  このコースに参加する前に、受講者は以下を身につけている必要があります&#58;
  - JavaScriptをよく理解。
  - HTMLとCSSの基本的な理解。
  - 少なくともnode.jsとnpmの概念。
  Visual StudioCodeやWebStormなどのウェブ開発用のIDE。
outlineSection: |-
  ### モジュール 1&#58;  Angularの紹介
  このモジュールでは、Angularとは何か、そしてAngularが現代のWeb開発で非常に重要である理由を説明します。
  #### レッスン 
  - ウェブアプリ開発の進化
  - Angular Coreとモジュール
  - TypeScript、Dart、プレーンで古いJavaScript

  このモジュールを完了すると、受講者は次のことができるようになります。&#58;  
  - 最新のウェブUIテクノロジーと、それらが最新の開発で果たす役割の理解。


  ### モジュール 2&#58;  TypeScriptで強く型付けされたJavaScript
  それを確認していきましょう&#58;  JavaScriptは大きなアプリケーション向けに設計されたものではありません。インターフェイスや強い型付けのような複雑なコードを飼いならすための多くの構造は完全に存在しません。また、最先端のJS機能の多くは、現在のブラウザーには実装されていません。 しかしTypeScriptは両方の問題の解決策であり、最新のアプリケーション規模のJavaScriptを記述することができます。


  #### レッスン 
  - アプリケーション規模のJavaScriptの作成
  - TypeScriptを使用したタイプセーフなJavaScript開発
  - 型、クラス、継承の実装
  - 名前空間とモジュール


  #### ラボ&#58; おもちゃ屋
  - TypeScriptプロジェクトの開始
  - モデルの作成&#58; 製品、カテゴリー、注文
  - ショッピングカートの作成
  - 外部ライブラリの使用
  - HTMLページにコードの追加

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - TypeScriptの利点の理解
  - TypeScriptのコア機能の使用
  - 新しいTypeScriptプロジェクトの設定
  - TypeScriptプロジェクトをコンパイルして実行


  ### モジュール 3&#58; コアコンセプト
  このモジュールでは、Angularアプリケーションの最も重要な構成要素について説明します。ここで習うことは、以降のすべての章の基礎となります。
  #### レッスン 
  - コンポーネント
  - モジュール
  - サービス
  - ツール


  #### ラボ&#58; 最初のプロジェクトの検査
  - 実行中のプロジェクトを開く
  - アプリケーションの要素
  - モジュールのロード
  - tsconfig.json

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - コンポーネントとサービスの目標の理解。
  - コンポーネントとサービスをモジュールにグループ化。
  Angularツールの使用。

  ### モジュール 4&#58; データバインディング
  データバインディングを使用すると、JavaScriptコードを記述しているときにHTMLを忘れることができます。これにより、2つの間に強い依存関係を作成することなく、ビューにデータを挿入できるだけではなく、より柔軟で、テスト可能で、保守可能なコードになります。
  #### レッスン 
  - バインディングの重要性
  - 表示するコンポーネント
  - 構造指令
  - ローカルテンプレート変数
  - 値の変換
  - コンポーネントを表示


  #### ラボ&#58; データバインディングを備えたタスクマネージャー
  - モジュール
  - タスクのリストの表示
  - スタイル
  - タスクの追加

  このモジュールを完了すると、受講者は次のことができるようになります。&#58;  
  - データバインディングを使用してビューの作成および更新。
  - コンポーネントでのユーザーインタラクションの処理。
  - ローカルテンプレート変数を持つ要素の確認。
  - 値の変換にはパイプの使用。


  ### モジュール 5&#58; コンポーネント
  このモジュールでは、コンポーネントについてもう少し詳しく説明します。コンポーネントの階層を作成する方法と、コンポーネント間で通信する方法を学習します。
  #### レッスン
  - 複数のコンポーネントの使用
  - 入出力
  - ViewChildとContentChild
  - EventEmitter
  - 指令のライフサイクル


  #### ラボ&#58; タスクマネージャー&#58; 複数のコンポーネントの使用
  - スタイルの追加
  - TaskCreatorコンポーネント
  - TaskCardコンポーネント
  - TaskListコンポーネント
  - アプリコンポーネント
  - コンポーネントの登録

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - 複雑なコンポーネントを複数のコンポーネントに分割
  - 親子コミュニケーションの設定
  - さまざまなライフサイクルフックの使用


  ### モジュール 6&#58; 属性ディレクティブ
  既存の要素にカスタム動作を追加したい場合はどうなりますか？このモジュールでは、NgClassesやNgStyleなどの既存のディレクティブについて説明した上で、ご自身で作成する方法も学んで頂きます。
  #### レッスン
  - 属性ディレクティブとは何か？
  - 組み込みの属性ディレクティブ
  - カスタム属性ディレクティブ

  このモジュールを完了すると、受講者は次のことができるようになります。&#58;  
  - 属性ディレクティブの役割の理解。
  - 組み込みの属性ディレクティブの使用。
  独自の属性ディレクティブの作成。

  ### モジュール 7&#58; 構造指令
  構造ディレクティブを使用すると、HTMLのフローを変更できます。たとえば、JavaScriptでHTMLを記述せずに、データに基づいて動的にHTMLを生成するにはどうすればよいでしょうか。
  #### レッスン 
  - 構造指令とは何か？
  - 組み込みの構造ディレクティブ
  - テンプレート
  - カスタム構造ディレクティブ

  このモジュールを完了すると、受講者は次のことができるようになります。&#58;  
  - 構造ディレクティブの役割の理解。
  - 組み込みの構造ディレクティブの使用。
  - 独自の構造ディレクティブの作成。


  ### モジュール 8&#58; Dependency InjectionとProviders
  Dependency Injection (DI)は、2つの強く結合されたオブジェクトを取得し、それらを引き裂く技術です。これは、理解、保守が簡単でテスト可能なコードを書く際に役立ちます。 実際、これはAngularで選ぶことではありません&#58; しなければならないことなのです。 Angularには、このモジュールで説明するDIをサポートするProvidersに基づくメカニズムがあります。
  #### レッスン 
  - 用語
  - Dependency Injectionの基本
  - サービス
  - プロバイダー
  - 工場
  - インジェクショントークン


  #### ラボ&#58; タスクサービスの作成
  - サービスの実装
  - サービスの提供
  - AppComponentの更新
  - モックサービスを実際のサービスに置き換え

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - 独自のサービスの作成。
  - Angularのさまざまなプロバイダーとの連携。
  - コンポーネントやその他のサービスにサービスを注入。


  ### モジュール 9&#58; パイプ
  パイプは、ビューの値にほとんど変更を加えないための便利な方法です。これには、データのフォーマットとフィルタリングが含まれます。使い方は簡単で、パイプの可能性を広げることができます。
  #### レッスン 
  - パイプの使用
  - ビルトインパイプ
  - カスタムパイプ
  - 純粋対不純


  #### ラボ&#58; 温度パイプ
  - Kelvin、Celsius、Farenheitの温度の表示ためのパイプの作成
  - 新しく作成したパイプの使用

  このモジュールを完了すると、受講者は次のことができるようになります。&#58;  
  - ビルトインパイプの使用。
  - 独自のパイプの作成。
  - 純粋なパイプの重要性の理解。



  ### モジュール 10&#58; フォームの操作
  フォームは、データの管理を可能にするすべてのアプリに不可欠です。データバインディング以上のことをする必要があります。検証、自動フォーマット、データ変更への対応などが必要です。 Angularは、これに対処するための2つの異なるアプローチを提供します&#58; テンプレート駆動型フォームとモデル駆動型フォームのことで、このモジュールでは、その両方についてご説明します。
  #### レッスン 
  - フォームの内容
  - 変更への対応
  - フォームビルダー
  - データ検証


  #### ラボ&#58; タスクエディタフォーム
  - TaskEditorコンポーネント
  - 基本的な検証
  - 複数のバリデーター
  - カスタムバリデーター

  このモジュールを完了すると、受講者は次のことができるようになります。&#58;  
  - テンプレート駆動型フォームとモデル駆動型フォームのどちらかを選択。
  - フォームを作成し、情報の送信。
  - 検証と視覚的なフィードバックの追加。


  ### モジュール 11&#58; サーバーとの会話
  このモジュールでは、データを取得してバックエンドに送信する方法について説明します。 RESTに焦点を当て、RxJS's Observablesを使用して作業を完了します。
  #### レッスン 
  - データの送受信
  - HTTPClientモジュール
  - HTTPインターセプター
  - Observables対Promises


  #### ラボ&#58;  Observablesの操作
  - オブザーバブルで動作するコンポーネントの更新


  #### ラボ&#58; サーバーとの会話
  - HttpClientモジュールの提供
  - HTTPサービスの実装

  このモジュールを完了すると、受講者は次のことができるようになります。&#58;  
  - HttpClientと連携してREST呼び出し 。
  - オブザーバブルで結果の処理。


  ### モジュール 12&#58; シングルページアプリケーションの構築
  あるページから次のページに移動する代わりに、ウェブサイトをシングルページアプリケーションとして設計できます。これにより、ウェブサイトがアプリケーションのように感じられ、実行されます。 SPAには多くの利点がありますが、通常は実装が困難です。このモジュールでは、SPAを構築するためにAngularで利用できる構成について説明します。
  #### レッスン 
  - SPAとは
  - ルーターモジュール
  - ルート構成
  - 親子ナビゲーション
  - ルートガード


  #### ラボ&#58;  7SPA&#58;の構築と Rabbit Rescue
  - 静的HTMLをコンポーネントとテンプレートに置き換え
  - 機能エリアごとにルーティングの設定
  - フィーチャエリアとルートエリアのリンク

  このモジュールを完了すると、受講者は次のことができるようになります。&#58;  
  - シングルページアプリケーションの作成。
  - 機能領域の作成。
  - 機能ごとにルーティングの設定。
  - 警備員によるナビゲーションの傍受。

  #### 追加資料無し
