### YamlMime:Course
title: Designing and Implementing Microsoft DevOps solutions
metadata:
  title: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
  description: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
uid: course.az-400t00
courseNumber: 'AZ-400T00-A'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 目標とスケジュールを共有して変換を計画する
- skill: プロジェクトを選択し、プロジェクト指標と主要業績評価指標 (KPI)を特定
- skill: チームと機敏な組織構造の作成
- skill: ツール統合戦略の設計
- skill: 'ライセンス管理戦略を設計（例: Azure DevOpsとGitHubユーザー）'
- skill: 作業項目から作業ソフトウェアまでのエンドツーエンドのトレーサビリティのための戦略の設計
- skill: 認証およびアクセス戦略の設計
- skill: On-premises (オンプレミス)とクラウドリソースを統合するための戦略の設計
- skill: ソースコントロールを使用するメリットの説明
- skill: Azure ReposとGitHubの説明
- skill: TFVCからGitへの移行
- skill: SonarCloud、およびその他のツーリングソリューションを含むコード品質の管理
- skill: コード品質に関する組織的知識の構築
- skill: Git reposの構造化方法の説明
- skill: Git分岐ワークフローの説明の説明
- skill: コラボレーションとコードレビューのプルリクエストの活用
- skill: Git hooksの自動化への活用
- skill: Gitを使用して組織全体の内部ソースを育成
- skill: Azureパイプラインとそのコンポーネントの説明の役割の説明
- skill: Azureパイプラインで使用するエージェントの構成
- skill: 継続的統合が重要な理由の説明
- skill: Azureパイプラインを使用した継続的統合の実装
- skill: サイト信頼性エンジニアリングの定義
- skill: エンドユーザーの満足度を測定し、ユーザーフィードバックを分析するプロセスの設計
- skill: アプリケーション分析の自動化のためのプロセスの設計
- skill: アラートの管理と無意味なアクション不可能なアラートの削減
- skill: 非難しないふりかえりを実施し、公正な文化を創造する
- skill: リリースパイプラインとアプリケーションインフラストラクチャのためのインフラストラクチャと構成戦略、および適切なツールセットを定義
- skill: アプリケーションインフラストラクチャへコンプライアンスとセキュリティを実装
- skill: オープンソースソフトウェアを統合することに関する潜在的な課題の説明
- skill: セキュリティおよびライセンス準拠のためにオープンソースソフトウェアパッケージを検査
- skill: 組織のセキュリティおよびコンプライアンスポリシーの管理
- skill: ライセンスと脆弱性スキャンをビルドおよび展開パイプラインに統合
- skill: パッケージセキュリティとライセンス評価にアクセスするためのビルドパイプラインの設定
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: |-
  本コースでは、DevOps のプロセスとプラクティスを設計および実装するための知識とスキルを提供します。受講者は、DevOps の計画、ソース管理の使用、企業向け Git の拡張、アーティファクトの統合、依存関係管理戦略の設計、秘密情報の管理、継続的統合の実装、コンテナ構築戦略の実装、リリース管理ワークフローの設計、導入パターンの実装、フィードバック メカニズムの最適化などを実行する方法を学習します。

  #### 視聴者プロフィール
  このコースに強く関心を抱く人は、DevOpsプロセスの設計と実装に興味があるか、Microsoft Azure DevOps Solutions認定試験に合格したいと思っている人です。
prerequisitesSection: |-
  合格する学習者は、下記のを事前の知識と理解を持つでしょう&#58;
  - PaaS、SaaS、IaaS実装の理解を含むクラウドコンピューティングの概念。
  - Azure管理とAzure開発の両方と、これらの分野の少なくとも1つで実績のある専門知識を持つ。
  - バージョン管理、アジャイルソフトウェア開発、およびコアソフトウェア開発原則。ソフトウェアを提供する組織における経験があれば、役に立ちます。
  
  Azureおよびクラウドコンピューティングを初めて使用する場合は、次のリソースのいずれかを検討してください。
  - 無料オンライン&#58; Azure Fundamentals (https://docs.microsoft.com/en-us/learn/paths/azure-fundamentals/) 
  - インストラクター主導のコース&#58; AZ-900&#58; Azure ファンダメンタル (https://docs.microsoft.com/en-us/learn/certifications/courses/az-900t01)
  
  Azure管理を初めて使用する場合は、次の手順を実行することを検討してください&#58;
  - 無料オンライン&#58; Azure Administratorsの前提条件（https://docs.microsoft.com/en-us/learn/paths/az-104-administrator-prerequisites/）
  - インストラクター主導のコース&#58; AZ-104&#58; Microsoft Azure Administrator (https://docs.microsoft.com/en-us/learn/certifications/courses/az-104t00)およびAZ-010&#58; AWS SysOpsのAzure管理(https://docs.microsoft.com/en-us/learn/certifications/courses/az-010t00)
  
  Azure Developerを初めて使用する場合は、次の手順を実行することを検討してください。
  - 無料オンライン&#58; サーバーレスのアプリケーションを作成する(https://docs.microsoft.com/en-us/learn/paths/create-serverless-applications/)
  - インストラクター主導のコース&#58; AZ-204&#58; Microsoft Azure向けソリューションの開発(https://docs.microsoft.com/en-us/learn/certifications/courses/az-204t00)およびAZ-020&#58; AWS開発者向けMicrosoft Azureソリューション(https://docs.microsoft.com/en-us/learn/certifications/courses/az-020t00)
outlineSection: |-
  ### Module 1&#58; DevOps の計画
  #### レッスン
  - 変換計画
  - プロジェクトの選択
  - チーム構造
  - Azure DevOps への移行

  #### ラボ&#58; Azure Boards によるアジャイルなプランニングとポートフォリオ管理

  このコースを修了すると、次のことができるようになります&#58;
  - 共有目標とタイムラインを持つ変換の計画
  - プロジェクトを選択し、プロジェクト指標と主要業績評価指標 (KPI)を特定
  - チームと機敏な組織構造の作成
  - ツール統合戦略の設計
  - ライセンス管理戦略を設計 (例: Azure DevOpsとGitHubユーザー)
  - 作業項目から作業ソフトウェアまでのエンドツーエンドのトレーサビリティのための戦略の設計
  - 認証およびアクセス戦略の設計
  - On-premises (オンプレミス)とクラウドリソースを統合するための戦略の設計
  
  
  ### モジュール 2&#58; ソースコントロール入門
  #### レッスン
  - ソースコントロールとは
  - ソースコントロールのメリット
  - ソース制御システムの種類
  - Azure Repos入門
  - GitHub入門
  - Team Foundation Version Control (TFVC)からAzure ReposのGitへの移行
  
  #### ラボ&#58; Azure ReposのGitによるバージョン管理
  
  このコースを修了すると、次のことができるようになります&#58;
  - ソースコントロールを使用するメリットの説明
  - Azure ReposとGitHubの説明
  - TFVCからGitへの移行
  
  
  ### モジュール 3&#58; テクニカル債務管理
  #### レッスン
  - 技術債権の特定
  - Teams内の知識共有
  - Codespacesによる開発環境の近代化
  
  #### ラボ&#58; Azure Project Wikisを使用したチームの知識の共有
  
  このコースを修了すると、次のことができるようになります&#58;
  - SonarCloud、およびその他のツーリングソリューションを含むコード品質の管理
  - コード品質に関する組織的知識の構築
  
  
  ### モ ジュール 4&#58; Git エンタープライズ向け DevOpsの操作
  #### レッスン
  - Gitレポの構造化方法
  - Git Branchingワークフロー
  - Azure Reposのプル要求とのコラボレーション
  - なぜGit Hooks を気にするのか
  - 内部ソースの育成
  - Gitリポジトリの管理
  
  #### ラボ&#58; Azure ReposのGitによるバージョン管理
  
  このコースを修了すると、次のことができるようになります&#58;
  - Git reposの構造化方法の説明
  - Git分岐ワークフローの説明
  - コラボレーションとコードレビューのプルリクエストの活用 
  - Git hooksの自動化への活用 
  - Gitを使用して組織全体の内部ソースを育成する
  
  
  ### モジュール 5&#58; Azure Pipelinesの設定
  #### レッスン
  - DevOpsにおけるパイプラインの概念
  - Azure Pipelines
  - ホスト型エージェントと自己ホスト型エージェントの使用を評価する
  - エージェントプール
  - パイプラインと並行性
  - Azure DevOpsとオープンソースプロジェクト（パブリックプロジェクト）
  - Azure Pipelines YAMLとビジュアルデザイナー
  
  #### ラボ&#58; エージェントプールの構成とパイプラインスタイルの理解
  
  このコースを修了すると、次のことができるようになります&#58;
  - Azure Pipelinesとそのコンポーネントの役割の説明
  - Azure Pipelinesで使用するエージェントの構成
  
  

  ### モジュール 6&#58; Azure Pipelinesを使用した継続的統合の実装
  ####レッスン
  - 継続統合概要
  - ビルド戦略の実現
  - Azure Pipelinesとの統合
  - 外部ソースコントロールとAzure Pipelinesの統合
  - 自己ホストエージェントの設定
  

  #### ラボ&#58; Azure Pipelinesとの継続的な統合の有効化
  
  #### ラボ&#58; 外部ソースコントロールとAzure Pipelinesの統合
  
  このコースを修了すると、次のことができるようになります&#58;
  - 継続的統合が重要な理由の説明 
  - Azure Pipelinesを使用した継続的統合の実装
  
  
  ### モジュール 7&#58;アプリケーション設定とシークレットの管理
  #### レッスン
  - セキュリティ入門
  - セキュアな開発プロセスの実装
  - アプリケーション設定データの再検討
  - 秘密、トークン、証明書の管理
  - アイデンティティ管理システムとの統合
  - アプリケーション構成の実装
  
  #### ラボ&#58; Azure Key VaultとAzure DevOpsの統合
  
  このコースを修了すると、次のことができるようになります&#58;
  - アプリケーション構成と秘密の管理
  - Azure Key Vaultをパイプラインと統合する 
  
  
  ### モジュール 8&#58; GitHubアクションとの継続的統合の実装
  #### レッスン
  - GitHubアクション
  - GitHubアクションと継続統合
  - GitHubアクションの秘密を守る
  

  #### ラボ&#58; GitHubアクションの継続的な統合
  
  このコースを修了すると、次のことができるようになります&#58;
  - GitHubアクションとワークフローの作成と操作
  - GitHubアクションとの継続統合の実装
  
  
  ### モジュール 9&#58; 依存関係管理戦略の設計と実装
  #### レッスン
  - パッケージング依存関係
  - パッケージ管理
  - アーティファクトの移行と統合
  - パッケージセキュリティ
  - バージョン管理戦略の実現
  
  ### ラボ&#58; Azureアーティファクトを使用したパッケージ管理
  
  このコースを修了すると、次のことができるようになります&#58;
  - アーティファクト管理ツールとPractices (プラクティス)の推奨
  - 共有と再利用を可能にするための一般的なパッケージを抽象化
  - アーティファクトの移行と統合
  - ソースコントロール対策の移行と統合
  
  
  ### モジュール 10&#58; リリース戦略の設計
  #### レッスン
  - 継続的デリバリーの入門
  - リリース戦略の推奨
  - 高品質リリースパイプラインの構築
  - 適切なリリース管理ツールの選択
  
  #### ラボ&#58; リリースゲートを使用した展開の制御
  
  #### ラボ&#58; リリースダッシュボードの作成
  
  このコースを修了すると、次のことができるようになります&#58;
  - リリースと展開の区別
  - リリースパイプラインのコンポーネントの定義
  - リリース戦略を設計する際に考慮すべきことを説明する
  - リリースプロセスとリリースプロセスを分類し、両方の品質を管理する方法の概要
  - リリースゲートの原則とリリースノートとドキュメントへの対処方法を説明する
  - リリース管理ツールの選択

