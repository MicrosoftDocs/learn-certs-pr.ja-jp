### YamlMime:Course
title: Introduction to Python
metadata:
  title: 'Course 55284-A: Introduction to Python'
  description: 'Course 55284-A: Introduction to Python'
uid: course.55284
courseNumber: '55284-A'
hoursToComplete: 96
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Pythonがどのように機能し、何に役立つかの理解。
- skill: プログラミング言語の世界におけるPythonの位置の理解。
- skill: Pythonで文字列を操作および操作。
- skill: Pythonで数学演算の実行。
- skill: Pythonシーケンス（リスト、配列、辞書、セット）の操作。
- skill: ユーザーの入力と出力の結果の収集。
- skill: Pythonでフロー制御処理の実行。
- skill: Pythonを使用してファイルに書き込みおよびファイルから読み取り。
- skill: Pythonで関数の記述。
- skill: Pythonで例外の処理。
- skill: Pythonで日付と時刻の操作。
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- beginner
roles:
- developer
summary: |-
  この4日間のPythonトレーニングコースでは、受講者はPythonでのプログラミングを学びます。このコースは、他のプログラミング言語の経験がある場合とない場合がある、その言語に不慣れな受講者を対象としています。
  このPythonコースは、Python 3を使用して教えられています。ただし、Python 2とPython 3の違いにご注意ください。プライベートPythonクラスの場合、インストラクターは必要に応じてPython 2に特に焦点を当てることも可能です。

  #### オーディエンスプロフィール
  このコースは、Pythonを学びたい受講者を対象としています。プログラミングの経験は役に立ちますが、必須ではありません。
prerequisitesSection: |-
  プログラミングの経験は役に立ちますが、必須ではありません。
outlineSection: |-
  ### モジュール 1&#58;  Pythonの基本
  1991年に最初に登場したPythonは、使用されている最も人気のあるプログラミング言語の1つです。 Pythonは高級プログラミング言語です。つまり、比較的人間が読める構文を使用しており、Pythonインタープリターによってコンピューターが理解できる言語に変換されます。他の一般的な高級プログラミング言語の例は、C#、Objective-C、Java、PHP、およびJavaScriptです。興味深いことに、Pythonとは異なり、これらの他のすべての言語はCのような構文を共有しています。これらの言語の1つ以上を使用する場合、Pythonの構文が少し奇妙に感じるかもしれません。しかし、少し時間をかけてみると、それが非常にプログラマーに優しいことをお分かり頂けることでしょう。

  #### レッスン
  - Pythonの実行
  - こんにちは世界！
  - リテラル
  - Pythonコメント
  - 変数
  - Pythonモジュールの作成
  - print()関数
  - ユーザー入力の収集
  - 助けを得る


  #### ラボ&#58; このレッスンの演習
  - こんにちは世界
  - タイプの調査
  - シンプルなPythonスクリプト

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - Pythonがどのように機能するかを理解。
  - プログラミング言語の世界におけるPythonの位置を理解。
  - Python3.xとPython2.xの違いを理解。
  - 変数とPythonのデータ型を理解。
  - 単純なモジュールの作成。
  - Pythonの助けを得る


  ### モジュール 2&#58; 関数とモジュール
  このモジュールでは、関数とモジュールの操作方法についてご説明します。
  #### レッスン
  - 関数の定義
  - 可変スコープ
  - グローバル変数
  - 関数パラメータ
  - 戻り値
  - モジュールのインポート


  #### ラボ&#58; このレッスンの演習
  - パラメータを持つ関数
  - デフォルト値のパラメータ

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - 関数を定義して呼び出し。
  - 関数へのパス引数でパラメーターの定義。
  - パラメータのデフォルト値の設定。
  - 変数スコープを理解。
  - 関数からの戻り値。
  - モジュールを作成してインポート。

  ### モジュール 3&#58; 数学
  Pythonには、いくつかの組み込みの数学関数と、拡張された数学（および関連する）機能を提供するいくつかの追加の組み込みライブラリが含まれています。このレッスンでは、組み込み関数と数学およびランダムライブラリについてご説明します。

  #### レッスン
  - 算術演算子
  - 代入演算子
  - 組み込みの数学関数
  - 数学モジュール
  - ランドンモジュール


  #### ラボ&#58; このレッスンの演習
  - フロアーとモジュール
  - ピザはいくつ必要か

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - Pythonでの基本的な計算。
  - 追加の数学演算には数学モジュールの使用。
  - 乱数モジュールを使用して乱数の生成。


  ### モジュール 4&#58;  Python文字列
  Pythonには、いくつかの組み込みの数学関数と、拡張された数学（および関連する）機能を提供するいくつかの追加の組み込みライブラリが含まれています。このレッスンでは、組み込み関数と数学およびランダムライブラリについてご説明します。

  #### レッスン
  - 引用符と特殊文字
  - 文字列インデックス
  - 文字列のスライス
  - 連結と繰り返し
  - 一般的な文字列メソッド
  - 文字列のフォーマット
  - フォーマットされた文字列リテラル（f文字列）
  - 組み込みの文字列関数


  #### ラボ&#58; このレッスンの演習
  - インデックス文字列
  - 文字列のスライス
  - 繰り返し
  - フォーマットのストリング
  - f文字列に精通する
  - タブ区切りテキストの出力

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - 文字列の操作。
  - 特殊文字のエスケープ
  - 複数行の文字列を処理。
  - 文字列にインデックスを付けてスライス。
  - 一般的な文字列演算子とメソッドの使用。
  - 文字列のフォーマット。
  - 組み込みの文字列関数の使用


  ### モジュール 5&#58; イテレーター&#58; シーケンス、辞書、およびセット
  イテレーターは、メンバーを一度に1つずつ返すことができるオブジェクトです。このレッスンで取り上げる反復可能オブジェクトは、リスト、タプル、範囲、辞書、およびセットです。

  #### レッスン
  - 定義
  - シーケンス
  - シーケンスの解凍
  - 辞書
  - len() 関数
  - セット
  - *args および **kwargs


  #### ラボ&#58; このレッスンの演習
  - ランダム要素を削除してリターン
  - シンプルなじゃんけんゲーム
  - スライスシーケンス
  - ユーザー入力から辞書の作成

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - Pythonで利用可能なさまざまなタイプの反復可能オブジェクトを理解
  - リストを作成、変更、および操作。
  - タイプルズを作成して操作。
  - 範囲の作成。
  - 辞書の作成、変更、および操作
  - セットを作成し、セットを使用してリスト内の重複の削除
  - *args および**kwargsパラメーターを理解。


  ### モジュール 6&#58; フロー制御
  一般に、プログラムは1行ずつ順番に流れます。関数を呼び出すことでこのフローの変更できることはすでに見てきました。フローは、条件ステートメントとループを使用して変更することもできます。

  #### レッスン
  - 条件文
  - Pythonでのループ
  - 中断して続行
  - enumerate()関数
  - ジェネレーター
  - リスト内包


  #### ラボ&#58; このレッスンの演習
  - すべての真といくつかの真
  - 単語推測ゲーム
  - 針を探す
  - サイコロを振る

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - Pythonの仮説条件で動作します。
  - Pythonでループの操作。
  - ジェネレーター関数の作成
  - リスト内包表記を使用

  ### モジュール 7&#58; 仮想環境
  仮想環境は、コンピューター上のPython開発プラットフォームのコンテナーです。パッケージは、標準環境または非仮想環境とは別の仮想環境にインストールできます。

  #### レッスン
  - 仮想環境


  #### ラボ&#58; このレッスンの演習
  - 仮想環境での作業

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - 仮想環境とは何かを理解。
  - 仮想環境の作成。
  - 仮想環境をアクティブ化および非アクティブ化。
  - 仮想環境を削除。


  ### モジュール 8&#58; 正規表現
  正規表現は、Java、PHP、JavaScript、C、C ++、Perlなどの多くのプログラミング言語でパターンマッチングを行うために使用されます。正規表現について簡単に紹介した後、Pythonで正規表現を操作する方法を示します。

  #### レッスン
  - 正規表現の構文
  - Pythonによる正規表現の処理

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - パターンマッチング用の正規表現の作成。
  - Python内で正規表現の使用。


  ### モジュール 9&#58;  ユニコードとエンコーディング
  このモジュールでは、ユニコードとエンコーディングの操作方法についてご説明します。
  #### レッスン
  - ビットとバイト
  - 16進数
  - エンコーディング


  #### ラボ&#58; このレッスンの演習
  -数値システム間で数値を変換
  -紛らわしいもの発見

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - 2進数と16進数の理解。
  - 数値システム間で数値の変換。


  ### モジュール 10&#58; ファイル処理
  Pythonを使用すると、オペレーティングシステム上のファイルやディレクトリにアクセスして変更できます。

  とりわけ、下記のことができるようになります&#58; 
  1. 新規または既存のファイルを開き、ファイルオブジェクト変数に保存。
  2. ファイルの内容を一度にまたは1行ずつ読み取り。
  3. ファイルの内容に追加。
  4. ファイルの内容の上書き。
  5. ディレクトリの内容を一覧表示。
  6. ファイルとディレクトリの名前の変更。

  #### レッスン
  - ファイルを開く
  - osおよびos.pathモジュール


  #### ラボ&#58; このレッスンの演習
  - ファイル内のテキストの検索
  - ファイルへの書き込み
  - リスト作成者

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - オペレーティングシステムでファイルの読み取り。
  - オペレーティングシステム上のファイルを作成して書き込み。
  - オペレーティングシステム上のディレクトリにAccessして操作。
  - osおよびos.pathモジュールの操作。


  ### モジュール 11&#58; 例外処理
  このモジュールでは、Pythonで例外を処理する方法についてご説明します。
  #### レッスン
  - 条項を除くワイルドカード
  - 例外に関する情報の取得
  - else条項
  - finally条項
  - フロー制御に例外の使用
  - 独自の例外の列挙
  - 例外階層


  #### ラボ&#58; このレッスンの演習
  - 例外の列挙
  - 累計の算出

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - Pythonで例外を処理。


  ### モジュール 12&#58;  Pythonの日付と時刻
  このモジュールでは、Pythonの日付と時刻を操作する方法についてご説明します。
  #### レッスン
  - 時間の理解
  - タイムモジュール
  - 日時モジュール


  #### ラボ&#58; このレッスンの演習
  - アムトラックの出発時間に関するレポート

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - タイムモジュールの操作。
  - 日時モジュールの操作。


  ### モジュール 13&#58; コマンドラインからPythonスクリプトを実行する
  このモジュールでは、コマンドラインからPythonスクリプトを実行する方法についてご説明します。
  #### レッスン
  - sys.arg
  - sys.path


  #### ラボ&#58; このレッスンの演習
  - Windows Easy Transferを使用した設定の移行
  - Windows 7の参照イメージの構成
  - 参照画像の構成

  このモジュールを完了すると、受講者は次のことができるようになります。&#58; 
  - コマンドラインからPythonスクリプトを実行。

  #### 追加資料
  無し
