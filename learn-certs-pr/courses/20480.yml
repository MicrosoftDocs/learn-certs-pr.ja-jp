### YamlMime:Course
title: Programming in HTML5 with JavaScript and CSS3
metadata:
  title: 'Course 20480-C: Programming in HTML5 with JavaScript and CSS3'
  description: 'Course 20480-C: Programming in HTML5 with JavaScript and CSS3'
uid: course.20480
courseNumber: '20480-C'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Visual Studio 2017 を使用して Web アプリケーションを作成および実行する方法を説明する。
- skill: HTML5 の新機能について説明し、HTML5 のページを作成してスタイル設定する。
- skill: JavaScript を使用して、 HTML5 ページにインタラクティブ機能を追加する。
- skill: さまざまな入力タイプを使用して HTML5 フォームを作成し、 HTML5 属性と JavaScript コードを使用してユーザー入力を検証する。
- skill: XMLHTTP Request オブジェクトと Fetch API を使用して、リモートデータソースとの間でデータを送受信する。
- skill: CSS3 を使用して HTML5 ページをスタイル設定する。
- skill: 適切に構造化され、容易にメンテナンスできる JavaScript コードを作成する。
- skill: 最新の JavaScript コードを記述し、 babel を使用してすべてのブラウザと互換性を持たせる。
- skill: インタラクティブな Web アプリケーションで、一般的な HTML5 API を使用する。
- skill: オフライン操作に対応したWeb アプリケーションを作成する。
- skill: さまざまなデバイスやフォームファクタに適応できる HTML5 の Web ページを作成する。
- skill: Canvas 要素を使用し、さらに Scalable Vector Graphics を使用して、高度なグラフィックを HTML5 ページに追加する。
- skill: HTML5 ページにアニメーションを追加して、ユーザー体験を向上させる。
- skill: Web アプリケーションとサーバー間のデータの送受信には、Web ソケットを使用する。
- skill: Web Worker のプロセスを利用して、長時間稼働する Web アプリケーションの応答性を向上させる。
- skill: Web パックを使用して、制作用の Web アプリケーションをパッケージ化する。
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- intermediate
roles:
- developer
products:
- vs
exams:
- uid: exam.70-480
summary: |-
  本コースでは、 HTML5、 CSS3、および JavaScript について概説します。本コースは、受講者が HTML5/CSS3/JavaScript プログラミングの基本スキルを習得するのに役立ちます。本コースは、 Web アプリケーションと Windows ストアアプリの両方のトレーニングパスへのエントリーポイントです。本コースでは、HTML5/CSS3/JavaScript を使用して、プログラミングロジックの実装、変数の定義と使用、ループと分岐の実行、ユーザーインターフェースの開発、ユーザー入力のキャプチャと検証、データの保存、およびよく構造化されたアプリケーションの作成に焦点を当てています。本コースのラボシナリオは、さまざまなアプリケーションシナリオの構造をサポートし、実証するために選択されています。これらは、 HTML5 ソフトウェアアプリケーションの確立に使用される原則とコーディングコンポーネント / 構造に焦点を当てることを意図しています。このコースでは、Windows 10 で実行される Visual Studio 2017 を使用します。

  #### 視聴者プロフィール
  本コースは、6か月～12か月のプログラミング経験があり、JavaScript と CSS3 の併用による HTML5 を使用したアプリケーション(Windows 10 用の Windows ストアアプリまたは Web アプリケーションのいずれか)の開発に興味を持つプロの開発者を対象としています。
prerequisitesSection: |-
  - 簡単な JavaScript のコードを書くことを含めて、1～3か月間の Web アプリケーション作成経験
  - 1か月間の Windows クライアントアプリケーションの作成経験
  - 1か月間の Visual Studio 2017 の使用経験
outlineSection: |-
  ### モジュール 1&#58; HTML と CSS の概要
  最新のウェブアプリケーションのほとんどは、ユーザーが読んで対話するコンテンツを記述するHTMLページ、そのコンテンツを視覚的に美しくするスタイルシート、ユーザーとページ、ページとサーバー間の対話性のレベルを提供する JavaScrip tコードを基盤にして構築されています。Web ブラウザは、HTML マークアップとスタイルシートを使用してこのコンテンツをレンダリングし、アプリケーションの動作を実装するために JavaScript コードを実行します。本モジュールでは、HTMLとCSS の基礎を復習し、HTML ページやスタイルシートを作成するために、本コースが使用するツールを紹介します。
  #### レッスン
  - HTML の概要
  - CSS の概要
  - Visual Studio 2017 を使用した Web アプリケーションの作成


  #### ラボ&#58; コントーソ会議アプリケーションの探索
  - コントーソ会議アプリケーションの探索
  - コントーソ会議アプリケーションの検証と修正

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - HTML 要素と属性を使用して Web ページをレイアウトする方法を説明する。
  - CSS を使用して Web ページに基本的なスタイルを適用する方法を説明する。
  - Microsoft Visual Studio が Web アプリケーションを構築するために提供するツールについて説明する。


  ### モジュール 2&#58; HTML ページの作成とスタイル設定
  HTML、 CSS、 JavaScript など、あらゆる Web アプリケーションの基盤となるテクノロジーは長年にわたって利用されてきましたが、 Web アプリケーションの目的と高度化は大きく変化しています。HTML5 は10年ぶりの HTML の主要な改訂であり、従来の Web アプリケーション、携帯型モバイルデバイスで動作するアプリケーション、および Windows 10 プラットフォームでもコンテンツを表示するのに最適な手段を提供しています。本モジュールでは、 HTML5 を紹介し、その新機能について説明し、 HTML5 の新機能を使用してコンテンツを表示する方法と、 CSS を使用してこのコンテンツのスタイル設定する方法を実演します。
  #### レッスン
  - マーケティング(HTML5)ページの作成
  - HTML5 ページのスタイル設定


  #### ラボ&#58; HTML5 ページの作成とスタイル設定
  - HTML5 ページの作成
  - HTML ページのスタイル設定

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - HTML5 の目的と新機能を説明し、新しい HTML5 要素を使用して Web ページのレイアウト方法について説明する。
  - CSS を使用して、 Web ページのレイアウト、テキスト、および背景のスタイルを設定する方法について説明する。


  ### モジュール 3&#58; Javascript の概要
  HTML および CSS は、 Web ページの構造情報、意味情報、および表示情報を提供します。ただし、これらのテクノロジーは、ユーザがブラウザを使用してページとどのように対話するかを記述するものではありません。この機能を実装するために、すべての最新ブラウザには、ページ内でのスクリプトの使用をサポートする JavaScript エンジンが搭載されています。また、スクリプトエンジンがそのページの内容にアクセスして変更できるようにするために、ブラウザがどのようにページをメモリに反映させるべきかを定義した W3C 標準のドキュメントオブジェクトモデル(DOM) も実装しています。本モジュールでは、 JavaScript プログラミングと DOM について概説しています。
  #### レッスン
  - JavaScript の概要
  - ドキュメントオブジェクトモデルの概要


  #### ラボ&#58; JavaScript を使用したデータの表示とイベントの処理。
  - プログラムによるデータの表示
  - イベントの処理

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - 基本的な JavaScript 構文について説明する。
  - DOM を使用して Web ページの情報を変更したり取得したりする JavaScript コードを書く。


  ### モジュール 4&#58; ユーザー入力を収集および検証するためのフォームの作成
  Web アプリケーションでは、タスクを実行するためにユーザー入力を収集する必要があることがよくあります。ユーザーが提供する情報についての誤解を最小限に抑えるために、 Web ページはユーザーからの入力内容について明確かつ簡潔にする必要があります。さらに、すべての入力がアプリケーションの要件に準拠していることを確認する必要があります。本モジュールでは、 HTML5 で利用できる新しい入力タイプを使用して入力フォームを定義する方法を学びます。また、HTML5 属性を使用してデータを検証する方法についても説明します。最後に、 JavaScript コードを使用して拡張入力検証を実行する方法、および入力が有効でない場合やアプリケーションの期待値と一致しない場合にユーザーにフィードバックを提供する方法について学びます。
  #### レッスン
  - HTML5 フォームの作成
  - HTML5 属性の使用によるユーザー入力の検証
  - JavaScript の使用によるユーザー入力の検証


  #### ラボ&#58; フォームの作成とユーザー入力の検証
  - HTML5 属性の使用によるフォームの作成とユーザー入力の検証
  - JavaScript の使用によるユーザー入力の検証

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - HTML5 を使用して入力フォームを作成する。
  - HTML5 フォーム属性を使用してデータを検証する。
  - HTML5 属性を使用して簡単に実装できない検証タスクを実行するために、JavaScript コードを書く。


  ### モジュール 5&#58; リモートサーバーとの通信
  多くの Web アプリケーションでは、リモートサイトに保存されているデータを使用する必要があります。場合によっては、指定した URL からデータをダウンロードするだけでこのデータにアクセスできることもあります。ただし、リモートサイトによってデータがカプセル化され、 Web サービスを通じてアクセスできるようになることもあります。本モジュールでは、 JavaScript コードを使用して Web サービスにアクセスし、リモートデータを Web アプリケーションに組み込む方法について学びます。これを実現するために2つのテクノロジー(XMLHttpRequest オブジェクトと Fetch API)があります。 XMLHttpRequest オブジェクトはリモート Web サイトへの HTTP リクエストのプログラムラッパーとして機能し、Fetch API は要求の送信とデータの受信に関連する多くのタスクを簡素化します。Fetch API と XMLHttpRequest オブジェクトは非同期 API ですので、受講者は、最初に Promise オブジェクト、 Arrow 関数、非同期要求を同期しているかのように処理できる新しい async/await 構文を使って非同期タスクを処理する方法について学習します。
  #### レッスン
  - JavaScript での非同期プログラミング
  - XMLHttpRequest オブジェクトを使用したデータの送受信
  - Fetch API を使用したデータの送受信


  #### ラボ&#58; リモートデータソースとの通信
  - データの取得
  - データのシリアル化および送信
  - jQuery Ajax メソッドを使用したコードのリファクタリング

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - 新しい非同期プログラミングテクノロジーを使用して、非同期 JavaScript タスクを処理する。
  - XMLHttpRequest オブジェクトを使用して、データを Web サービスに送信したり、 Web サービスからデータを受信したりする。
  - Fetch API を使用して、データを Web サービスに送信したり、 Web サービスからデータを受信したりする。


  ### モジュール 6&#58; CSS3 を使用した HTML5 のスタイル作成
  Web ページに表示されるコンテンツのスタイル設定は、アプリケーションを魅力的で使いやすいものにするための重要な要素です。CSS は、 Web アプリケーションがスタイルを実装するために使用する主要なメカニズムであり、 CSS3 に追加された機能は、最新のブラウザに搭載されている多くの新機能をサポートしています。CSS1 と CSS2.1 が単一のドキュメントであったのに対し、 World Wide Web Consortium は、 CSS3 をモジュールのセットとして記述することを選択し、それぞれが、色、テキスト、ボックスモデル、アニメーションなど、プレゼンテーションの単一の側面に焦点を当てています。これにより、仕様書は実装とともにインクレメンタルに開発することができます。各仕様は、 CSS1 および CSS2 にすでに存在するプロパティと値、および新しいプロパティと値を定義しています。本モジュールでは、これらのモジュールのいくつかで定義されているプロパティと値、CSS3 で定義されている新しいセレクタ、および擬似クラスと擬似要素を使用してこれらのセレクタを洗練させることを検討します。
  #### レッスン
  - CSS3 を使用したテキストのスタイル設定
  - スタイリングブロックの要素
  - 擬似クラスと擬似要素
  - CSS3 を使用したグラフィカル効果の強化


  #### ラボ&#58; CSS3 を使用したテキストおよびブロック要素のスタイル設定
  - ナビゲーションバーのスタイル設定
  - レジスターリンクのスタイル設定
  - アバウトページのスタイル設定

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - CSS3 の新機能を使用して、テキスト要素のスタイルを設定する。
  - CSS3 の新機能を使用して、ブロック要素のスタイルを設定する。
  - CSS3 セレクタ、擬似クラス、および擬似要素を使用して、要素のスタイルを洗練させる。
  - CSS3 グラフィカル効果を使用してページを強化する。


  ### モジュール 7&#58; JavaScript を使用した使ったオブジェクトとメソッドの作成
  コードの再利用とメンテナンスの容易さは、適切に構造化されたアプリケーションを書く上で重要な目標です。これらの目標を達成できれば、コードの記述と保守に関連するコストを削減できます。本モジュールでは、ネームスペース、オブジェクト、カプセル化、継承などの言語機能を使用して、適切に構造化された JavaScript コードを記述する方法について説明します。これらの概念は、Java や C# のような言語での経験がある人には馴染みがあるように思えるかもしれませんが、JavaScript のアプローチは全く異なり、メンテナンス可能なコードを書きたい場合には理解しなければならない微妙な点がたくさんあります。
  #### レッスン
  - 適切に構造化された JavaScript コードの記述
  - カスタマーオブジェクトの作成
  - オブジェクトの拡張


  #### ラボ&#58; 保守性と拡張性のためのコードの精緻化
  - オブジェクトの継承
  - オブジェクトを使用するための JavaScript コードのリファクタリング

  本モジュールをすると、受講者は以下のことができるようになります。
  - 適切に構造化された JavaScript コードを書く。
  - JavaScript コードを使用してカスタムオブジェクトを作成する。
  - JavaScript イディオムを使用して、オブジェクト指向の手法を実装する。


  ### モジュール 8&#58; HTML5 API を使用したインタラクティブページの作成
  インタラクティビティは、最新の Web アプリケーションの重要な側面であり、ユーザのアクションにすばやく対応して、ユーザの位置に合わせて自分自身を適応させることができる魅力的な Web サイトを構築できます。本モジュールでは、ローカルファイルシステムへのアクセス、ウェブページ内の要素へのデータのドラッグ アンドドロップ、マルチメディアファイルの再生、および地理情報の取得を可能にするインタラクティブな HTML5 ウェブアプリケーションの作成方法について説明します。
  #### レッスン
  - ファイルとの相互作用
  - マルチメディアの組み込み
  - ブラウザの位置とコンテキストへの反応
  - Web アプリケーションのデバッグとプロファイリング


  #### ラボ&#58; HTML5 API を使用したインタラクティブページの作成
  - 画像のドラッグ＆ドロップ
  - ビデオの組み込み
  - ユーザーの現在位置を報告するための Geolocation API の使用

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - ローカルファイルシステムにアクセスして、 Web ページにドラッグ＆ドロップサポートを追加する。
  - プラグインを使用せずに、 Web ページでビデオおよびオーディオファイルを再生する。ユーザの現在位置に関する情報を取得する。
  - Microsoft Edge の F12 Developer Tools を使用して、 Web アプリケーションのデバッグとプロファイルを行う。


  ### モジュール 9&#58; Web アプリケーションへのオフラインサポートの追加
  Web アプリケーションは、 Web ページやデータを取得するためにネットワークに接続できることに依存しています。ただし、一部の環境では、ネットワーク接続が断続的になることがあります。このような状況では、ユーザーのデバイスにキャッシュされたデータを使用して、アプリケーションが機能を継続できるようにすると便利な場合があります。HTML5 では、セッション ストレージやローカル ストレージ、アプリケーション キャッシュと呼ばれるリソース キャッシュ機構など、新しいクライアント側ストレージの選択肢が用意されています。本モジュールでは、これらのテクノロジーを使用して、ネットワーク接続が使用できない場合でも動作を継続できる堅牢な Web アプリケーションを作成する方法を学びます。
  #### レッスン
  - ローカルでのデータの読み取りと書き込み
  - アプリケーションキャッシュの使用によるオフラインサポートの追加


  #### ラボ&#58; Web アプリケーションへのオフラインサポートの追加
  - アプリケーションキャッシュ API の使用によるオフラインデータのキャッシュ
  - ローカルストレージ API の使用によるユーザーデータの永続化

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - ユーザのデバイスにローカルにデータを保存し、Web アプリケーションからこのデータにアクセスする。
  - アプリケーションキャッシュを使用して、オフライン操作をサポートするように Web アプリケーションを構成する。


  ### モジュール 10&#58; 適応型ユーザーインターフェイスの実装
  Web の最も永続的な特徴の1つは、その一時的な性質です。初めて、キーボードとマウスによる独占状態が崩されそうですが、それはユーザーインターフェースがどのように設計されているかを問うことを意味しています。受講者は、大型で高解像度のモニター、マウス、キーボードを備えたコンピュータ上で Web アプリケーションを開発するかもしれませんが、他のユーザーは、マウスを使わずにスマートフォンやタブレットで受講者のアプリケーションを見たり、対話したりするかもしれませんし、異なる解像度のモニターを持っているかもしれません。ユーザーは、アプリケーションのページを印刷したいと思うかもしれません。本モジュールでは、表示されているデバイスの機能やフォームファクタに合わせて、ページのレイアウトや機能を適応させるウェブサイトの構築方法を学びます。受講者は、ページの表示に使用されているデバイスの種類を検出する方法と、特定のデバイスを対象としたコンテンツを効果的にレイアウトする方法について学びます。
  #### レッスン
  - 複数のフォームファクタをサポート
  - 適応ユーザーインタフェースの作成


  #### ラボ&#58; 適応型ユーザーインターフェイスの実装
  - 印刷しやすいスタイルシートの作成
  - さまざまなフォームファクタに合わせたページレイアウトの調整

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - さまざまなフォームファクタに対応するための Web サイトの要件を説明する。
  - 表示されているデバイスのフォームファクタに合わせてレイアウトを調整できる Web ページを作成する。


  ### モジュール 11&#58; 上級グラフィックの作成
  高解像度でインタラクティブなグラフィックは、最新のアプリケーションの重要な部分です。グラフィックは、コンテンツに視覚的な側面を提供し、ウェブサイトをより魅力的で使いやすくすることで、ユーザーの体験を向上させるのに役立ちます。インタラクティビティは、ウェブサイトのグラフィカルな要素がユーザーの入力や環境の変化に適応して反応することを可能にし、ユーザーの注意とコンテンツへの興味を維持するためのもう一つの重要な要素です。

  本モジュールでは、 Scalable Vector Graphics(SVG)および Microsoft Canvas API を使用して、 HTML5 で高度なグラフィックを作成する方法について説明します。受講者は、SVG関連の要素を使用して、Webページにグラフィカルなコンテンツを表示する方法を学びます。また、ユーザーがキーボードイベントやマウスイベントなどのイベントを使用して SVG 要素と対話できるようにする方法についても学びます。

  Canvas API は SVG とは多少異なります。Canvas APIは、要素と JavaScript 関数のセットを提供しており、これらの関数を呼び出すことでキャンバスの表面にグラフィックを描画することができます。受講者は、Canvas API の使用方法と、 Canvas または SVG の使用が適切かどうかについても学びます。
  #### レッスン
  - SVG 使用によるインタラクティブグラフィックの作成
  - Canvas API 使用によるグラフィックの描画


  #### ラボ&#58; 上級グラフィックの作成
  -SVGを使用してインタラクティブな会場マップを作成する
  - Canvas API 使用によるスピーカーバッジの作成

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - SVG を使用してインタラクティブなグラフィックコンテンツを作成する。
  - Canvas API を使用して、プログラムでグラフィックコンテンツを生成する。


  ### モジュール 12&#58; ユーザーインターフェイスのアニメーション化
  アニメーションは、 Web サイトでユーザーの関心を維持するための重要な要素です。アニメーションは慎重に実装されており、 Web ページの使いやすさを向上させ、ユーザーのアクションに関する有益な視覚的フィードバックを提供します。

  本モジュールでは、 CSS アニメーションを使用して Web ページを拡張する方法について説明します。受講者は、トランジションをプロパティ値に適用する方法を学びます。トランジションを使用すると、プロパティの変更のタイミングを指定できます。たとえば、マウスポインタが要素の上に乗ったときに、5秒間で要素の幅と高さを変化させるように指定することができます。次に、 2D および 3D 変換を要素に適用する方法を学びます。トランスフォームでは、要素の拡大縮小、平行移動、回転、斜め移動を行うことができます。また、トランスフォームにトランジションを適用して、指定されたアニメーション期間中に徐々にトランスフォームが適用されるようにすることもできます。

  本モジュールの最後では、キーフレームアニメーションを要素に適用する方法について学びます。キーフレームアニメーションでは、アニメーション中の特定の時点でプロパティ値のセットを定義できます。たとえば、アニメーション期間の 0 パーセント、 33 パーセント、 66 パーセント、および 100 パーセントで要素の色と位置を指定できます。
  #### レッスン
  - CSS トランジションの適用
  - 要素の変形
  - CSS キーフレームアニメーションの適用


  #### ラボ&#58; ユーザーインターフェイスのアニメーション化
  - CSS トランジションの適用
  - キーフレームアニメーションの適用

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - HTML 要素にプロパティ値をアニメーション化するために、トランジションを適用する。
  - HTML 要素に 2D および 3D トランスフォームを適用する。
  - キーフレームアニメーションを HTML 要素に適用する。


  ### モジュール 13&#58; Web ソケット使用によるリアルタイム通信の実装
  Web ページは、 HTTP リクエストを送信することによって、 Web サーバからオンデマンドでデータをリクエストします。本モデルは、ユーザーのアクションによって機能が制御される対話型アプリケーションの構築に最適です。ただし、たえず変化する情報を表示する必要のあるアプリケーションでは、このメカニズムはあまり適していません。たとえば、株式相場のページは、数分でも古い価格が表示されていれば価値がなくなり、そしてユーザーがブラウザに表示されているページを常に更新することは期待できません。ここでは Web ソケットが便利です。Web Sockets API は、 Web サーバーとブラウザ間のリアルタイム双方向通信を実装するためのメカニズムを提供しています。

  本モジュールでは、 Web ソケットについて概説し、その動作について説明します。また、 Web ページと Web サーバ間でリアルタイムにデータを送信するために使用できる Web ソケット接続を作成する方法についても説明します。
  #### レッスン
  - Web ソケットの概要
  - WebSocket API の使用


  #### ラボ&#58;Web ソケット使用によるリアルタイム通信の実行
  - Web ソケットからのメッセージ受信
  - Web ソケットへのメッセージ送信
  - さまざまな Web ソケットメッセージタイプの処理

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - Web ソケットを使用して Web ページと Web サーバー間のリアルタイム通信を有効にする方法について説明する。
  - Web ページから Web サーバーに接続し、 Web ページと Web サーバー間でメッセージを交換するために、 Web ソケット API を使用する。


  ### モジュール 14&#58; Web Workers を使用したバックグラウンド処理の実行
  JavaScript コードは、 Web ページに機能を実装するための強力なツールですが、このコードは、 Web ページが読み込まれたとき、または Web ページが表示されている間のユーザーアクションに応答したときに実行されること覚えておく必要があります。コードはブラウザによって実行されており、コードが完了までにかなりの時間を要する操作を行うと、ブラウザが応答しなくなり、ユーザの操作性が低下する可能性があります。

  HTML5 では、 Web ワーカーが導入されています。これにより、処理をバックグラウンドスレッドにオフロードできるため、ブラウザの応答性を維持できます。本モジュールでは、 Web ワーカーの操作方法と、 Web アプリケーションでの Web ワーカーの使用方法について説明します。
  #### レッスン
  Web Workers の理解
  Web Workers を使用した非同期処理の実行


  #### ラボ&#58; Web Worker プロセスの作成
  - Web Worker 使用による応答性の向上

  本モジュールを終了すると、受講者は以下のことができるようになります&#58;
  - Web ワーカーを使用してマルチスレッドを実装し、 Web アプリケーションの応答性を向上させる方法を説明する。
  - Web ワーカーを使用して処理を実行し、 Web ワーカーと通信し、 Web ワーカーを制御する。


  ### モジュール 15&#58; 製品デプロイのためのパッケージ化されたJavaScript
  モデルを使用すると、大型で複雑なアプリケーションを構築できます。ECMAScript6のバージョンにおける言語の進歩によって、アプリケーションの構築プロセスを簡素化するためのビルドアプリが出来るようになりました。
  ただし、 ECMASCRIPcript6 モジュールや他の機能の使用は、まだすべてのブラウザでサポートされているわけではありません。Node.js、Webpack、Babel などのツールによって、ユーザー体験を損なうことを避ける目的で、各種ブラウザのサポートしつつ新たな言語の機能を使用できるようになります。

  本モジュールでは、これらのツールの背後にある理論、どのような場合に使用する必要があるのか、また、使用にあたっての各種オプションなどについて概説します。モジュールの最後にこれらのツールを使用しての、すべてのブラウザでサポートされている ECMASCRIPT6 コードの書き方を見ていきます。
  #### レッスン
  - TranspilersとModule バンドリングの理解
  - クロスブラウザサポートするために個別パッケージを作成


  #### ラボ&#58; 製品用の WebPack バンドルのセットアップ
  - WebPack を使用したパッケージの作成と展開

